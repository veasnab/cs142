/**
 * Test program for CS 142 Assignment 1 (Version of 1/12/2021 12:30 PM)
 * 
 * You may only use this program as a student of Martin Hock, CS 142 Fall 2020.
 * You may not give this program to any other people or companies (aside from
 * private storage).
 * 
 * Directions: Run this program from the same project source folder as your
 * BakingCalculator.java file.
 */

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.nio.charset.Charset;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Base64;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;
import java.util.zip.InflaterInputStream;

public class BakingCalculatorTest {

	public static void main(String[] args) {
		// Please use change the following variable to contain your Sortable Name as
		// found in your Canvas Account Settings. It should include a comma.
		// This will let BakingCalculatorTest look up your special recipe.
		String name = "Your name here";

		// Please don't change the stuff below.
		String dict = "eNplUj1u3jAM3X0KDh0SAw2QL22HbG1zgAzploWWaH+CFVERpSZf9pwgY6/SdviOkpOUUuz8FQYIg3wk33tU3/dw7gmFIHAmyFvMGpxAIuMigeGQ0QUBhBLcdSEYXZgoxeRCPoK+7y+DBvgRPaPVErgMN857cJZCduMOdlwAg9WxOq5uauWBIJYkhSxESq341aClK2fgzMmWA0newTl7Z3ZtUfd9y4Y9Kk2zdXFleIUzCVi+o6BseXYkpx2YEpWz9x91SWRdOnouqYOsWiNzgAHnylbY4ktWQNDnpVvKhK87fmJQ4gh0mxMaRdE0yYI1b6hJ9w2DfjAkQvuW6DGoUeNpNzSEdBcqXDInjeS9NCOUWCLr1D/R/5Ya2Xu+qYwjmhknte26oBqcVW+zVy9iqvTP4Afg8X/xdZRSwkmHJfhw1G2+AN+tF9YbaFOV/1TutDTwbU2+smqpeX0JzgKXYKgi3lmzoI6Xq1Sf1sahEaibqrvPQM0ffFIfnJnlcJXYdpecacU9ebY2bSr7g007wOE69t0hFuzm5PH+1/734/3D/s/+7z/UqwlA";
		String[] tests = {
		"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",
		};
		String[] recipes = {
		"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",
		};
		int[] hashes = {1220, 192, 881, 1387, 538, 54, 3801, 2534, 614, 2552, 2442, 1273, 2246, 2203, 1007, 2735, 2240, 3940, 4061, 226, 1649, 2795, 3514, 1055, 2501, 116, 3726, 783, 1235, 3967, 2569, 2809, 552, 332, 504, 1490, 3381, 3018, 2394, 3608, 669, 864, 1715, 897, 2114, 2668};

		if (!Charset.defaultCharset().toString().equals("UTF-8")) {
			System.out.println("You need to switch to the UTF-8 character encoding to view fraction symbols.");
			System.out.println(
					"Go to Window -> Preferences -> General -> Workspace -> Encoding -> Text file encoding -> Other and select UTF-8.");
			return;
		}

		if (name.equals("Your name here") || !name.contains(",") || name.contains(":") || !name.contains(" ")) {
			System.out.println(
					"Please enter your Sortable Name inside the \"quotes\" next to the = in the name variable.");
			System.out.println("The name should match the Sortable Name shown in Canvas.");
			System.out.println("You can find it in Canvas Account -> Settings.");
			System.out.println("The link is found in the blue bar on the left side of Canvas.");
			System.out.println("The name will include a comma.");
			return;
		}
		SecureRandom sr;
		int x;
		try {
			sr = SecureRandom.getInstance("SHA1PRNG");
			name = name.trim().replaceAll("[^A-Za-z]", "").toUpperCase();
			sr.setSeed(name.getBytes());
			x = sr.nextInt(4096);
			sr = SecureRandom.getInstance("SHA1PRNG");
			sr.setSeed(name.substring(name.length()/2).getBytes());
		} catch (NoSuchAlgorithmException e) {
			System.out.println("I am unable to set up the random generator needed for your assignment.");
			System.out.println("Please make sure you are using the version of Java specified by your instructor.");
			return;
		}
		int myidx = 0;
		for (; myidx < hashes.length; myidx++) {
			if (hashes[myidx] == x)
				break;
		}
		if (myidx == hashes.length) {
			System.out.println("I couldn't find your recipe! Please double check that your name is correct.");
			System.out.println("The name should match the Sortable Name shown in Canvas.");
			System.out.println("You can find it in Canvas Account -> Settings.");
			System.out.println("The link is found in the blue bar on the left side of Canvas.");
			System.out.println("The name will include a comma.");
			System.out.println("If your name has changed since the course began, please let your instructor know.");
			System.out.println("You may need to use the name you used at the start of the course.");
			return;
		}
		byte[] d = new byte[757];
		{
			Inflater di = new Inflater();
			di.setInput(Base64.getDecoder().decode(dict));
			try {
				di.inflate(d);
			} catch (DataFormatException e) {
				System.out.println("There was a problem with dictionary inflate. Please contact your instructor.");
				e.printStackTrace(System.out);
				return;
			}
			di.end();
		}
		byte[] r = new byte[4096];
		{
			Inflater ri = new Inflater();
			byte[] er = Base64.getDecoder().decode(recipes[myidx]);
			for (int i = 0; i < er.length; i++) {
				er[i] ^= (byte) sr.nextInt(256);
			}
			ri.setInput(er);
			try {
				if (ri.inflate(r) != 0) {
					System.out.println("There was a problem with inflate setup. Please contact your instructor.");
					return;
				}
				ri.setDictionary(d);
				r = Arrays.copyOf(r, ri.inflate(r));
			} catch (DataFormatException e) {
				System.out.println("There was a problem with recipe inflate. Please contact your instructor.");
				e.printStackTrace(System.out);
				return;
			}
			System.out.println(new String(r));
			ri.end();
		}
		int[][] mytests;
		{
			byte[] et = Base64.getDecoder().decode(tests[myidx]);
			for (int i = 0; i < et.length; i++) {
				et[i] ^= (byte) sr.nextInt(256);
			}
			ObjectInputStream ios;
			try {
				ios = new ObjectInputStream(new InflaterInputStream(new ByteArrayInputStream(et)));
				mytests = (int[][]) ios.readObject();
				if (mytests[0].length != 1 || mytests[0][0] != x) {
					System.out.println("There was a problem checking the tests. Please contact your instructor.");
					return;
				}
				mytests[0] = new int[12];
				ios.close();
			} catch (IOException | ClassNotFoundException e) {
				System.out.println("There was a problem decoding the tests. Please contact your instructor.");
				e.printStackTrace(System.out);
				return;
			}
		}

		System.out.println("\nStarting tests:\n");
		int bofscore = 0, cosscore = 0, bobscore = 0, bovscore = 0, coescore = 0, bosscore = 0, pobscore = 0,
				bscore = 0, bocscore = 0, tcscore = 0;
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.bagsOfFlour(mytests[i][0], mytests[i][1]);
			if (mytests[i][2] != count) {
				System.out.println("bagsOfFlour(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][2] + ", but your method returned " + count);
				break;
			}
			bofscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.containersOfSalt(mytests[i][0], mytests[i][1]);
			if (mytests[i][3] != count) {
				System.out.println("containersOfSalt(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][3] + ", but your method returned " + count);
				break;
			}
			cosscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.boxesOfBakingSoda(mytests[i][0], mytests[i][1]);
			if (mytests[i][4] != count) {
				System.out.println("boxesOfBakingSoda(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][4] + ", but your method returned " + count);
				break;
			}
			bobscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.bottlesOfVanilla(mytests[i][0], mytests[i][1]);
			if (mytests[i][5] != count) {
				System.out.println("bottlesOfVanilla(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][5] + ", but your method returned " + count);
				break;
			}
			bovscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.cartonsOfEggs(mytests[i][0], mytests[i][1]);
			if (mytests[i][6] != count) {
				System.out.println("cartonsOfEggs(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][6] + ", but your method returned " + count);
				break;
			}
			coescore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.bagsOfSugar(mytests[i][0], mytests[i][1]);
			if (mytests[i][7] != count) {
				System.out.println("bagsOfSugar(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][7] + ", but your method returned " + count);
				break;
			}
			bosscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.packagesOfButter(mytests[i][0], mytests[i][1]);
			if (mytests[i][8] != count) {
				System.out.println("packagesOfButter(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][8] + ", but your method returned " + count);
				break;
			}
			pobscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.bananas(mytests[i][0], mytests[i][1]);
			if (mytests[i][9] != count) {
				System.out.println("bananas(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][9] + ", but your method returned " + count);
				break;
			}
			bscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			int count = BakingCalculator.bagsOfChocolateChips(mytests[i][0], mytests[i][1]);
			if (mytests[i][10] != count) {
				System.out.println("bagsOfChocolateChips(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][10] + ", but your method returned " + count);
				break;
			}
			bocscore++;
		}
		for (int i = 0; i < mytests.length; i++) {
			double cost = BakingCalculator.totalCost(mytests[i][0], mytests[i][1]);
			if (Math.abs(mytests[i][11] / 100.0 - cost) > 0.00001) {
				System.out.println("totalCost(" + mytests[i][0] + ", " + mytests[i][1] + ") should return "
						+ mytests[i][11] / 100.0 + ", but your method returned " + cost);
				break;
			}
			tcscore++;
		}
		int score = bofscore / 2 + cosscore / 2 + bobscore / 2 + bovscore / 2 + coescore / 2 + bosscore / 2
				+ pobscore / 2 + bscore / 2 + bocscore / 2 + tcscore / 2;

		System.out.println("bagsOfFlour:          " + bofscore / 2 + " / 10");
		System.out.println("containersOfSalt:     " + cosscore / 2 + " / 10");
		System.out.println("boxesOfBakingSoda:    " + bobscore / 2 + " / 10");
		System.out.println("bottlesOfVanilla:     " + bovscore / 2 + " / 10");
		System.out.println("cartonsOfEggs:        " + coescore / 2 + " / 10");
		System.out.println("bagsOfSugar:          " + bosscore / 2 + " / 10");		
		System.out.println("packagesOfButter:     " + pobscore / 2 + " / 10");
		System.out.println("bananas:              " + bscore / 2 + " / 10");
		System.out.println("bagsOfChocolateChips: " + bocscore / 2 + " / 10");
		System.out.println("totalCost:            " + tcscore / 2 + " / 10");
		System.out.println("Total score:         " + score + " / 100");

	}

}
